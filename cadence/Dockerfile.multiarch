# # syntax=docker/dockerfile:1
# ARG ARCH=
# FROM --platform=${BUILDPLATFORM} ${ARCH}golang:1.18.1-bullseye
# FROM --platform=${BUILDPLATFORM} ${ARCH}golang:1.18.1-bullseye
# LABEL maintainer="Ken Ellorando (kenellorando.com)"
# LABEL source="github.com/kenellorando/cadence"
# WORKDIR /cadence
# COPY ./* ./
# RUN go mod download
# ARG TARGETOS TARGETARCH
# RUN if [ "$TARGETARCH" = "arm" ] ; then \ 
#     apt update && apt install g++-arm-linux-gnueabihf -y; \
#     CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ CGO_ENABLED=1 GOOS=$TARGETOS GOARCH=arm go build -o /cadence-server --tags "linux sqlite_fts5" -ldflags '-w'; \
#     apt remove --purge g++-arm-linux-gnueabihf -y; \
#     elif [ "$TARGETARCH" = "amd64" ] ; then \
#     CGO_ENABLED=1 GOOS=$TARGETOS GOARCH=$TARGETARCH go build -o /cadence-server --tags "linux sqlite_fts5"; fi
# RUN apt clean && apt autoremove --purge -y
# RUN useradd -s /bin/bash cadence
# RUN touch /cadence/music-metadata.db
# RUN chown cadence:cadence /cadence/ /cadence/*
# RUN chmod u+wrx /cadence/* /cadence/ /cadence-server

# EXPOSE 8080
# USER cadence
# CMD [ "/cadence-server" ]


ARG ARCH=
FROM --platform=${BUILDPLATFORM} ${ARCH}golang:1.18.1-bullseye as builder
WORKDIR /cadence
COPY ./* ./
RUN go mod download
ARG TARGETOS TARGETARCH
RUN if [ "$TARGETARCH" = "arm" ] ; then \ 
    apt update && apt install g++-arm-linux-gnueabihf -y; \
    CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ CGO_ENABLED=1 GOOS=$TARGETOS GOARCH=arm go build -o /cadence-server --tags "linux sqlite_fts5" -ldflags '-w'; \
    apt remove --purge g++-arm-linux-gnueabihf -y; \
    elif [ "$TARGETARCH" = "amd64" ] ; then \
    CGO_ENABLED=1 GOOS=$TARGETOS GOARCH=$TARGETARCH go build -o /cadence-server --tags "linux sqlite_fts5"; fi
RUN apt clean && apt autoremove --purge -y

ARG ARCH=
FROM ${ARCH}golang:1.18.1-bullseye
COPY --from=builder /cadence /cadence/server/
COPY --from=builder /cadence-server /cadence/cadence-server
EXPOSE 8080
# TODO: use non-root user
CMD [ "/cadence/cadence-server" ]
